{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchTerm","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAaeA,EAVF,SAACC,GACV,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCGfC,EARE,SAACR,GACd,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCG/CM,G,MANG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC7B,OACQ,uBAAOC,KAAK,SAASF,YAAaA,EAAaG,SAAUF,EAAcZ,UAAU,aCiC9Ee,E,kDAhCb,aAAe,IAAD,8BACZ,gBAeFH,aAAe,SAAAI,GAAC,OAAI,EAAKC,SAAS,CAACC,WAAYF,EAAEG,OAAOC,SAdtD,EAAKC,MAAQ,CACXb,SAAU,GACVU,WAAY,IAJF,E,qDAUd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAK1C,WAAU,IAAD,EACwBC,KAAKN,MAA7Bb,EADA,EACAA,SAAUU,EADV,EACUA,WACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAWY,kBAEnG,OACE,sBAAK9B,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,CAAWW,YAAY,oBAAoBC,aAAce,KAAKf,eAC9D,cAAC,EAAD,CAAUJ,SAAUoB,W,GA3BVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4ad5094a.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nconst Card = (props) => {\n    return (\n        <div className=\"card-container\">\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set3&size=180x180`} />\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div>\n    )\n}\n\nexport default Card\n","import './card-list.styles.css'\nimport Card from '../card/card.component'\n\nconst CardList = (props) => {\n    return (\n        <div className=\"card-list\">\n            {props.monsters.map(monster => <Card key={monster.id} monster={monster} />)}\n        </div>\n    )\n}\n\nexport default CardList\n","import React from 'react'\nimport './search-box.styles.css'\n\nconst SearchBox = ({placeholder, handleChange}) => {\n    return (\n            <input type=\"search\" placeholder={placeholder} onChange={handleChange} className=\"search\" />\n    )\n}\n\nexport default SearchBox\n","import './App.css';\nimport {Component} from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      monsters: [],\n      searchTerm: ''\n    }\n\n    // this.handleChange = this.handleChange.bind(this)\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n\n  handleChange = e => this.setState({searchTerm: e.target.value})\n\n  render() {\n    const {monsters, searchTerm} = this.state\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchTerm.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Robots</h1>\n        <SearchBox placeholder=\"Search Monster...\" handleChange={this.handleChange} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}